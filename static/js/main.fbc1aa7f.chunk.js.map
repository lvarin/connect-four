{"version":3,"sources":["Cell.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","style","backgroundColor","color","onClick","Board","board","i","rows","row","key","columns","j","push","colors","index","Game","status","useState","nextColor","setNextColor","Array","fill","setColors","winner","setWinner","calculateWinner","Ewinner","Swinner","SEwinner","x","k","done","k2","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAaeA,MAVf,SAAcC,GACV,OACI,4BACIC,UAAU,SACVC,MAAO,CAACC,gBAAiBH,EAAMI,OAC/BC,QAASL,EAAMK,W,MCcZC,MAlBf,SAAeN,GAIX,IADA,IAAMO,EAAQ,GACNC,EAAI,EAAGA,EAAIR,EAAMS,KAAMD,IAAK,CAEhC,IADA,IAAIE,EAAM,GADsB,aAG5B,IAAIC,EAAIH,EAAER,EAAMY,QAAQC,EACxBH,EAAII,KAAK,kBAAC,EAAD,CAAMH,IAAKA,EAAKP,MAAOJ,EAAMe,OAAOJ,GAAMK,MAAOL,EAAKN,QAAS,kBAAML,EAAMK,QAAQM,QAFxFE,EAAE,EAAGA,EAAGb,EAAMY,QAASC,IAAM,IAIrCN,EAAMO,KAAK,yBAAKH,IAAKH,GAAIE,IAG7B,OACI,yBAAKT,UAAU,SAASM,IC4EjBU,MAxFf,WACI,IAkEIC,EAnEQ,EAQsBC,mBAHnB,OALH,mBAQLC,EARK,KAQMC,EARN,OASgBF,mBAASG,MAAMb,IAAcc,KALpC,UAJT,mBASLR,EATK,KASGS,EATH,OAUgBL,mBAAS,MAVzB,mBAULM,EAVK,KAUGC,EAVH,KAYNC,EAAkB,WAMpB,IAJA,IAAIC,EACAC,EACAC,EAEItB,EAAI,EAAGA,EAjBN,EAiBcA,IACnB,IAAI,IAAIK,EAAI,EAAGA,EAjBP,EAiBkBA,IAKtB,GAJGA,GAAID,IAAqBgB,GAAU,GACnCpB,GAAIC,IAAkBoB,GAAU,GAChCrB,GAAIC,GAAoBI,GAAID,IAAqBkB,GAAW,GAlBtD,UAoBNf,EAtBC,EAsBMP,EAAUK,GAAqB,CACvC,IAAI,IAAIkB,EAAI,EAAGA,EAtBV,EAsBwBA,IAExBhB,EAzBH,EAyBUP,EAAUK,KAAOE,EAzB3B,GAyBmCP,EAAEuB,GAAWlB,KAAIgB,GAAS,GAE1Dd,EA3BH,EA2BUP,EAAUK,KAAOE,EA3B3B,EA2BkCP,GAAWK,EAAEkB,MAAKH,GAAS,GAE1Db,EA7BH,EA6BUP,EAAUK,KAAOE,EA7B3B,GA6BmCP,EAAEuB,IAAYlB,EAAEkB,MAAKD,GAAU,GAGpE,GAAGF,GAAWC,GAAWC,EAAU,OAAOf,EAhCxC,EAgC+CP,EAAUK,GAKrE,OAAO,MAkCX,OAJIK,EADDO,EACU,wCAAa,kBAAC,EAAD,CAAMrB,MAAOqB,KAE1B,sCAAW,kBAAC,EAAD,CAAMrB,MAAOgB,KAGjC,yBAAKnB,UAAU,OACf,4BAAQA,UAAU,cACd,2CACA,kBAAC,EAAD,CACIQ,KA7EC,EA8EDG,QA7EI,EA8EJG,OAAQA,EACRV,QAAS,SAACG,GAAD,OAvCD,SAAAwB,GAEhB,IAAGP,EAAH,CAOA,IAJA,IAAIZ,EAAImB,EA7CI,EA8CRC,GAAK,EAGAzB,EAAEC,EAAQD,GAAG,EAAGA,IAAK,CAC1B,IAAI0B,EAlDI,EAkDC1B,EAAUK,EAEfoB,GAlDS,UAkDDlB,EAAOmB,KACfnB,EAAOmB,GAAMd,EACba,GAAK,EACLP,EAAUC,MAGdM,IAEJT,EAAUT,GACVM,EA1DW,QA0DED,EAzDF,OADA,SA4Eae,CAAY3B,MANpC,SAOMU,KC5ECkB,MAPf,WAEE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fbc1aa7f.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Cell.css\"\n\nfunction Cell(props){\n    return (\n        <button\n            className=\"circle\"\n            style={{backgroundColor: props.color}}\n            onClick={props.onClick}\n            ></button>\n    );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nfunction Board(props){\n\n\n    const board = [];\n    for(var i = 0; i < props.rows; i++) {\n        var row = []\n        for(var j=0; j <props.columns; j++) {\n            let key=i*props.columns+j;\n            row.push(<Cell key={key} color={props.colors[key]} index={key} onClick={() => props.onClick(key)}/>);\n        }\n        board.push(<div key={i}>{row}</div>)\n    }\n\n    return (\n        <div className=\"board\">{board}</div>\n    );\n}\n\nexport default Board;","import React, {useState} from 'react';\n\nimport Board from './Board';\nimport Cell from './Cell';\nimport \"./Cell.css\"\n\nfunction Game() {\n    const rows = 6;\n    const columns = 7;\n    const enough2Win = 4;\n    const initialColor = 'white';\n    const color1 = 'red';\n    const color2 = 'blue';\n    //\n    const [nextColor, setNextColor] = useState(color1);\n    const [colors, setColors] = useState(Array(rows*columns).fill(initialColor));\n    const [winner, setWinner] = useState(null);\n\n    const calculateWinner = () => {\n\n        var Ewinner;\n        var Swinner;\n        var SEwinner;\n\n        for(var i = 0; i<rows; i++)\n            for(var j = 0; j<columns; j++) {\n                if(j<=(columns-enough2Win)) Ewinner = true;\n                if(i<=(rows-enough2Win)) Swinner = true;\n                if(i<=(rows-enough2Win) && j<=(columns-enough2Win)) SEwinner = true;\n                //console.log('Starting ('+i+','+j+')='+(i*columns+j)+' # E:'+Ewinner+' S:'+Swinner+' SE:'+SEwinner);\n                if(colors[i*columns+j] !== initialColor) {\n                  for(var x = 0; x<enough2Win; x++) {\n                    //console.log('E ('+(i+x)+','+(j)+')');\n                    if(colors[i*columns+j] !== colors[(i+x)*columns+j]) Swinner =false;\n                    //console.log('S ('+(i)+','+(j+x)+')');\n                    if(colors[i*columns+j] !== colors[i*columns+(j+x)]) Ewinner =false;\n                    //console.log('SE ('+(i+x)+','+(j+x)+')');\n                    if(colors[i*columns+j] !== colors[(i+x)*columns+(j+x)]) SEwinner =false;\n                    //console.log('----');\n                  }\n                  if(Ewinner || Swinner || SEwinner) return colors[i*columns+j];\n\n                  //console.log('=====');\n                }\n            }\n        return null;\n    }\n\n    const handleClick = k => {\n        // No clicks if we have a winner\n        if(winner) return;\n\n        // Calculate the colunm (j) the click was\n        var j = k%columns\n        var done=false;\n\n        // This simulates the gravity\n        for (var i=rows-1; i>=0; i--) {\n            var k2 = i*columns+j;\n\n            if(!done && colors[k2] === initialColor) {\n                colors[k2] = nextColor;\n                done=true\n                setWinner(calculateWinner());\n            }\n        }\n        if(!done) return;\n\n        setColors(colors);\n        setNextColor(nextColor === color1 ? color2 : color1);\n\n    }\n\n    var status;\n    if(winner)\n        status = <div>Winner: <Cell color={winner} /></div>;\n    else\n        status = <div>Next: <Cell color={nextColor} /></div>\n\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <p>Connect Four</p>\n            <Board\n                rows={rows}\n                columns={columns}\n                colors={colors}\n                onClick={(i) => handleClick(i)}/>\n            Ô∏è{status}\n        </header>\n        </div>\n    );\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\n\nimport Game from './Game'\n\nfunction App() {\n\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}